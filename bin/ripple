#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/ruby-progress'
require 'optparse'

# Ripple CLI implementation
module RippleCLI
  def self.run
    trap('INT') do
      RubyProgress::Utils.show_cursor
      exit
    end

    options = {
      speed: :medium,
      direction: :bidirectional,
      rainbow: false,
      spinner: false,
      spinner_position: :before,
      caps: false,
      inverse: false,
      command: nil,
      success_message: nil,
      fail_message: nil,
      complete_checkmark: false
    }

    OptionParser.new do |opts|
      opts.banner = 'Usage: ripple [options] STRING'

      opts.on('-s', '--speed SPEED', %i[fast medium slow], 'Set animation speed ((f)ast/(m)edium/(s)low)') do |s|
        options[:speed] = case s
                          when /^f/ then :fast
                          when /^m/ then :medium
                          when /^s/ then :slow
                          else :slow
                          end
      end

      opts.on('-r', '--rainbow', 'Enable rainbow mode') do
        options[:rainbow] = true
      end

      opts.on('-d', '--direction DIRECTION', 'Set animation format ((f)orward/(b)ack-and-forth)') do |f|
        options[:format] = f =~ /^f/ ? :forward_only : :bidirectional
      end

      opts.on('-i', '--inverse', 'Enable inverse mode') do
        options[:inverse] = true
      end

      opts.on('-c', '--command COMMAND', 'Run a command during the animation') do |command|
        options[:command] = command
      end

      opts.on('--success MESSAGE', 'Message to display on success') do |msg|
        options[:success_message] = msg
      end

      opts.on('--fail MESSAGE', 'Message to display on error') do |msg|
        options[:fail_message] = msg
      end

      opts.on('--checkmark') do
        options[:complete_checkmark] = true
      end

      opts.on('--spinner TYPE', 'Display a rippling spinner with the message') do |type|
        options[:spinner] = type.normalize_type
      end

      opts.on('--spinner-pos POSITION', 'Display spinner [b]efore or [a]fter message') do |pos|
        options[:spinner_position] = pos =~ /^a/ ? :after : :before
      end

      opts.on('--list-spinners', 'List available spinners') do
        out = "Spinners:\n"
        RubyProgress::INDICATORS.each do |k, v|
          out += "- #{k}: #{v[2]}\n"
        end
        puts out
        exit
      end

      opts.on('--caps') do
        options[:caps] = true
      end

      opts.on('--stdout', 'Output captured command result to STDOUT') do |_output|
        options[:output] = :stdout
      end

      opts.on('--quiet', 'Suppress all output') do |_quiet|
        options[:output] = :quiet
      end

      opts.on('-v', '--version', 'Display the version') do
        puts "Ripple version #{RubyProgress::VERSION}"
        exit
      end

      opts.on('-h', '--help', 'Display this help message') do
        puts opts
        exit
      end
    end.parse!

    if ARGV.empty?
      puts 'Please provide a string to animate as an argument.'
      exit 1
    end

    if options[:command]
      captured_output = nil
      res = RubyProgress::Ripple.progress(ARGV.join(' '), options) do
        captured_output = `#{options[:command]} 2>&1`
      end

      res = $?.success?

      puts captured_output if options[:output] == :stdout
      if options[:success_message]
        message = if res
                    options[:success_message]
                  else
                    options[:fail_message] || options[:success_message]
                  end
        RubyProgress::Ripple.complete(ARGV.join(' '), message, options[:complete_checkmark], res)
      end
      exit res ? 0 : 1
    end

    rippler = RubyProgress::Ripple.new(ARGV.join(' '), {
                                         speed: options[:speed],
                                         format: options[:format],
                                         rainbow: options[:rainbow],
                                         inverse: options[:inverse]
                                       })
    RubyProgress::Utils.hide_cursor
    rippler.advance while true
    RubyProgress::Utils.show_cursor
    RubyProgress::Ripple.complete(ARGV.join(' '), options[:success_message], options[:complete_checkmark], true)
  end
end

RippleCLI.run if __FILE__ == $PROGRAM_NAME
